pipeline {
    agent any

    // Definición de variables de entorno
    environment {
        DOCKERHUB_CREDENTIALS = credentials('lunafelipe1997-docker-registry') // Credenciales de Docker Hub
        DOCKER_IMAGE = 'aluna1997/whitelist-api:2.0' // Nombre de la imagen Docker
    }

    stages {
        // Etapa 1: Inicialización y configuración del entorno
        stage('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "Python Version = $(python3 --version)"
                    echo "Pip Version = $(pip3 --version)"
                '''
            }
        }

        // Etapa 2: Instalación de dependencias
        stage('Install Dependencies') {
            steps {
                sh 'sudo pip3 install -r requirements.txt'
            }
        }

        // Etapa 3: Ejecución de pruebas
        //stage('Run Tests') {
        //    steps {
        //        sh 'pytest tests/'
        //    }
        //}

        // Etapa 4: Construcción de la imagen Docker
        stage('Build') {
            steps {
                sh 'sudo docker build -t ${DOCKER_IMAGE} .'
            }
        }

        // Etapa 5: Autenticación en Docker Hub y envío de la imagen
        stage('Login & Push') {
            steps {
                sh '''
                    echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin docker.io
                    sudo docker push ${DOCKER_IMAGE}
                '''
            }
        }
    }

    // Post-actions (ejecutar siempre, incluso si falla)
    post {
        always {
            echo 'Pipeline finalizado, limpiando...'
        }
        success {
            echo '¡Pipeline ejecutado con éxito!'
        }
        failure {
            echo 'Pipeline falló. Revisa los logs para más detalles.'
        }
    }
}