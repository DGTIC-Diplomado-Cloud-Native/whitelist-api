apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kubectl-apply
  namespace: diploe2-lunafelipe1997
spec:
  params:
    - name: manifest
      description: "Nombre del despliegue a crear o actualizar"
      type: string
    - name: image
      description: "Imagen a usar (opcional)"
      type: string
      default: "docker.io/aluna1997/whitelist-api:v2"
  steps:
    - name: deploy-or-update
      image: bitnami/kubectl:latest
      script: |
        #!/usr/bin/env bash
        set -e
        
        DEPLOYMENT_NAME=$(params.manifest)
        IMAGE=$(params.image)
        
        # Verificar si el despliegue ya existe
        if kubectl get deployment ${DEPLOYMENT_NAME} 2>/dev/null; then
          echo "El despliegue ${DEPLOYMENT_NAME} ya existe, actualizando imagen..."
          
          # Actualizar la imagen usando la lógica original de kubectl-apply-patch-deployment.yaml
          kubectl patch deployment ${DEPLOYMENT_NAME} --patch="{\"spec\":{\"template\":{\"spec\":{
            \"containers\":[{
              \"name\": \"${DEPLOYMENT_NAME}\",
              \"image\": \"${IMAGE}\"
            }]
          }}}}"
        else
          echo "El despliegue ${DEPLOYMENT_NAME} no existe, creándolo..."
          
          # Lógica original de kubectl-apply-deployment.yaml
          kubectl create deployment ${DEPLOYMENT_NAME} --image="${IMAGE}"
          
          # Crear el servicio si no existe
          if ! kubectl get service ${DEPLOYMENT_NAME}-service 2>/dev/null; then
            kubectl expose deployment ${DEPLOYMENT_NAME} --port=8000 --target-port=8000 --name=${DEPLOYMENT_NAME}-service
          fi
        fi
        
        echo "----------"
        kubectl get deployment
        
        # Esperar a que el despliegue esté listo
        kubectl rollout status deployment/${DEPLOYMENT_NAME}